// Generated by rstantools.  Do not edit by hand.

/*
    bayeslist is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bayeslist is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bayeslist.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_model_predict_cmp_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_model_predict_cmp");
    reader.add_event(87, 85, "end", "model_model_predict_cmp");
    return reader;
}
template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
gd(const T0__& p, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 5;
        return stan::math::promote_scalar<fun_return_scalar_t__>(binomial_log(1, 1, p));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct gd_functor__ {
    template <typename T0__>
        typename boost::math::tools::promote_args<T0__>::type
    operator()(const T0__& p, std::ostream* pstream__) const {
        return gd(p, pstream__);
    }
};
template <typename T2__, typename T3__>
typename boost::math::tools::promote_args<T2__, T3__>::type
h0d(const int& y,
        const int& J,
        const T2__& alpha,
        const T3__& beta, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 9;
        return stan::math::promote_scalar<fun_return_scalar_t__>(beta_binomial_log(y, J, alpha, beta));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct h0d_functor__ {
    template <typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T2__, T3__>::type
    operator()(const int& y,
        const int& J,
        const T2__& alpha,
        const T3__& beta, std::ostream* pstream__) const {
        return h0d(y, J, alpha, beta, pstream__);
    }
};
template <typename T2__, typename T3__>
typename boost::math::tools::promote_args<T2__, T3__>::type
h1d(const int& y,
        const int& J,
        const T2__& alpha,
        const T3__& beta, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 13;
        return stan::math::promote_scalar<fun_return_scalar_t__>(beta_binomial_log(y, J, alpha, beta));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct h1d_functor__ {
    template <typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T2__, T3__>::type
    operator()(const int& y,
        const int& J,
        const T2__& alpha,
        const T3__& beta, std::ostream* pstream__) const {
        return h1d(y, J, alpha, beta, pstream__);
    }
};
template <typename T1__>
typename boost::math::tools::promote_args<T1__>::type
fd_l(const int& y,
         const T1__& p, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 18;
        return stan::math::promote_scalar<fun_return_scalar_t__>(binomial_log(y, 1, p));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct fd_l_functor__ {
    template <typename T1__>
        typename boost::math::tools::promote_args<T1__>::type
    operator()(const int& y,
         const T1__& p, std::ostream* pstream__) const {
        return fd_l(y, p, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_model_predict_cmp
  : public stan::model::model_base_crtp<model_model_predict_cmp> {
private:
        int N;
        int J;
        std::vector<int> Y;
        int K;
        matrix_d X;
        std::vector<int> treat;
        std::vector<int> outcome;
        std::vector<double> a;
        std::vector<double> b;
public:
    model_model_predict_cmp(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_model_predict_cmp(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_model_predict_cmp_namespace::model_model_predict_cmp";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "J", "int", context__.to_vec());
            J = int(0);
            vals_i__ = context__.vals_i("J");
            pos__ = 0;
            J = vals_i__[pos__++];
            current_statement_begin__ = 27;
            validate_non_negative_index("Y", "N", N);
            context__.validate_dims("data initialization", "Y", "int", context__.to_vec(N));
            Y = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("Y");
            pos__ = 0;
            size_t Y_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < Y_k_0_max__; ++k_0__) {
                Y[k_0__] = vals_i__[pos__++];
            }
            size_t Y_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < Y_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Y[i_0__]", Y[i_0__], 0);
            }
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            current_statement_begin__ = 29;
            validate_non_negative_index("X", "N", N);
            validate_non_negative_index("X", "K", K);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,K));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, K);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = K;
            size_t X_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 30;
            validate_non_negative_index("treat", "N", N);
            context__.validate_dims("data initialization", "treat", "int", context__.to_vec(N));
            treat = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("treat");
            pos__ = 0;
            size_t treat_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < treat_k_0_max__; ++k_0__) {
                treat[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 31;
            validate_non_negative_index("outcome", "N", N);
            context__.validate_dims("data initialization", "outcome", "int", context__.to_vec(N));
            outcome = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("outcome");
            pos__ = 0;
            size_t outcome_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < outcome_k_0_max__; ++k_0__) {
                outcome[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 32;
            validate_non_negative_index("a", "K", K);
            context__.validate_dims("data initialization", "a", "double", context__.to_vec(K));
            a = std::vector<double>(K, double(0));
            vals_r__ = context__.vals_r("a");
            pos__ = 0;
            size_t a_k_0_max__ = K;
            for (size_t k_0__ = 0; k_0__ < a_k_0_max__; ++k_0__) {
                a[k_0__] = vals_r__[pos__++];
            }
            size_t a_i_0_max__ = K;
            for (size_t i_0__ = 0; i_0__ < a_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "a[i_0__]", a[i_0__], 0);
            }
            current_statement_begin__ = 33;
            validate_non_negative_index("b", "K", K);
            context__.validate_dims("data initialization", "b", "double", context__.to_vec(K));
            b = std::vector<double>(K, double(0));
            vals_r__ = context__.vals_r("b");
            pos__ = 0;
            size_t b_k_0_max__ = K;
            for (size_t k_0__ = 0; k_0__ < b_k_0_max__; ++k_0__) {
                b[k_0__] = vals_r__[pos__++];
            }
            size_t b_i_0_max__ = K;
            for (size_t i_0__ = 0; i_0__ < b_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "b[i_0__]", b[i_0__], 0);
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 41;
            validate_non_negative_index("psi0", "K", K);
            num_params_r__ += K;
            current_statement_begin__ = 43;
            validate_non_negative_index("psi2", "K", K);
            num_params_r__ += K;
            current_statement_begin__ = 44;
            validate_non_negative_index("delta00", "K", K);
            num_params_r__ += K;
            current_statement_begin__ = 45;
            num_params_r__ += 1;
            current_statement_begin__ = 46;
            num_params_r__ += 1;
            current_statement_begin__ = 47;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_model_predict_cmp() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 41;
        if (!(context__.contains_r("psi0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi0");
        pos__ = 0U;
        validate_non_negative_index("psi0", "K", K);
        context__.validate_dims("parameter initialization", "psi0", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi0(K);
        size_t psi0_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < psi0_j_1_max__; ++j_1__) {
            psi0(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(psi0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 43;
        if (!(context__.contains_r("psi2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi2");
        pos__ = 0U;
        validate_non_negative_index("psi2", "K", K);
        context__.validate_dims("parameter initialization", "psi2", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi2(K);
        size_t psi2_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < psi2_j_1_max__; ++j_1__) {
            psi2(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(psi2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 44;
        if (!(context__.contains_r("delta00")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable delta00 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("delta00");
        pos__ = 0U;
        validate_non_negative_index("delta00", "K", K);
        context__.validate_dims("parameter initialization", "delta00", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> delta00(K);
        size_t delta00_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < delta00_j_1_max__; ++j_1__) {
            delta00(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 1, delta00);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable delta00: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 45;
        if (!(context__.contains_r("gamma0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "gamma0", "double", context__.to_vec());
        double gamma0(0);
        gamma0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(gamma0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 46;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "phi", "double", context__.to_vec());
        double phi(0);
        phi = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 47;
        if (!(context__.contains_r("rho0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "rho0", "double", context__.to_vec());
        double rho0(0);
        rho0 = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, rho0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 41;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi0;
            (void) psi0;  // dummy to suppress unused var warning
            if (jacobian__)
                psi0 = in__.vector_constrain(K, lp__);
            else
                psi0 = in__.vector_constrain(K);
            current_statement_begin__ = 43;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi2;
            (void) psi2;  // dummy to suppress unused var warning
            if (jacobian__)
                psi2 = in__.vector_constrain(K, lp__);
            else
                psi2 = in__.vector_constrain(K);
            current_statement_begin__ = 44;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> delta00;
            (void) delta00;  // dummy to suppress unused var warning
            if (jacobian__)
                delta00 = in__.vector_lub_constrain(0, 1, K, lp__);
            else
                delta00 = in__.vector_lub_constrain(0, 1, K);
            current_statement_begin__ = 45;
            local_scalar_t__ gamma0;
            (void) gamma0;  // dummy to suppress unused var warning
            if (jacobian__)
                gamma0 = in__.scalar_constrain(lp__);
            else
                gamma0 = in__.scalar_constrain();
            current_statement_begin__ = 46;
            local_scalar_t__ phi;
            (void) phi;  // dummy to suppress unused var warning
            if (jacobian__)
                phi = in__.scalar_constrain(lp__);
            else
                phi = in__.scalar_constrain();
            current_statement_begin__ = 47;
            local_scalar_t__ rho0;
            (void) rho0;  // dummy to suppress unused var warning
            if (jacobian__)
                rho0 = in__.scalar_lub_constrain(0, 1, lp__);
            else
                rho0 = in__.scalar_lub_constrain(0, 1);
            // transformed parameters
            current_statement_begin__ = 53;
            validate_non_negative_index("delta", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> delta(K);
            stan::math::initialize(delta, DUMMY_VAR__);
            stan::math::fill(delta, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 54;
            for (int i = 1; i <= K; ++i) {
                current_statement_begin__ = 55;
                stan::model::assign(delta, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::log((1 / ((1 / get_base1(delta00, i, "delta00", 1)) - 1))), 
                            "assigning variable delta");
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 53;
            size_t delta_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(delta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: delta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable delta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 62;
            lp_accum__.add(normal_log<propto__>(psi0, 0, 10));
            current_statement_begin__ = 63;
            lp_accum__.add(normal_log<propto__>(psi2, 0, 10));
            current_statement_begin__ = 64;
            lp_accum__.add(normal_log<propto__>(gamma0, 0, 10));
            current_statement_begin__ = 65;
            for (int i = 1; i <= K; ++i) {
                current_statement_begin__ = 66;
                lp_accum__.add(beta_log<propto__>(get_base1(delta00, i, "delta00", 1), (get_base1(a, i, "a", 1) + 1), (get_base1(b, i, "b", 1) + 1)));
            }
            current_statement_begin__ = 70;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 71;
                if (as_bool((primitive_value(logical_eq(get_base1(treat, i, "treat", 1), 1)) && primitive_value(logical_eq(get_base1(Y, i, "Y", 1), 0))))) {
                    current_statement_begin__ = 72;
                    lp_accum__.add(((fd_l(get_base1(outcome, i, "outcome", 1), inv_logit(((multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), psi2) + (get_base1(Y, i, "Y", 1) * phi)) + (0 * gamma0))), pstream__) + stan::math::log((1 - stan::math::exp(gd(inv_logit(multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), delta)), pstream__))))) + h0d(0, J, ((inv_logit(multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), psi0)) * (1 - rho0)) / rho0), (((1 - inv_logit(multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), psi0))) * (1 - rho0)) / rho0), pstream__)));
                } else if (as_bool((primitive_value(logical_eq(get_base1(treat, i, "treat", 1), 1)) && primitive_value(logical_eq(get_base1(Y, i, "Y", 1), (J + 1)))))) {
                    current_statement_begin__ = 74;
                    lp_accum__.add(((fd_l(get_base1(outcome, i, "outcome", 1), inv_logit(((multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), psi2) + ((get_base1(Y, i, "Y", 1) - 1) * phi)) + (1 * gamma0))), pstream__) + gd(inv_logit(multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), delta)), pstream__)) + h1d(J, J, ((inv_logit(multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), psi0)) * (1 - rho0)) / rho0), (((1 - inv_logit(multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), psi0))) * (1 - rho0)) / rho0), pstream__)));
                } else if (as_bool(logical_eq(get_base1(treat, i, "treat", 1), 1))) {
                    current_statement_begin__ = 76;
                    lp_accum__.add(stan::math::log((((stan::math::exp(fd_l(get_base1(outcome, i, "outcome", 1), inv_logit(((multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), psi2) + ((get_base1(Y, i, "Y", 1) - 1) * phi)) + (1 * gamma0))), pstream__)) * stan::math::exp(gd(inv_logit(multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), delta)), pstream__))) * stan::math::exp(h1d((get_base1(Y, i, "Y", 1) - 1), J, ((inv_logit(multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), psi0)) * (1 - rho0)) / rho0), (((1 - inv_logit(multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), psi0))) * (1 - rho0)) / rho0), pstream__))) + ((stan::math::exp(fd_l(get_base1(outcome, i, "outcome", 1), inv_logit(((multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), psi2) + (get_base1(Y, i, "Y", 1) * phi)) + (0 * gamma0))), pstream__)) * (1 - stan::math::exp(gd(inv_logit(multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), delta)), pstream__)))) * stan::math::exp(h0d(get_base1(Y, i, "Y", 1), J, ((inv_logit(multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), psi0)) * (1 - rho0)) / rho0), (((1 - inv_logit(multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), psi0))) * (1 - rho0)) / rho0), pstream__))))));
                } else {
                    current_statement_begin__ = 78;
                    lp_accum__.add(stan::math::log((((stan::math::exp(fd_l(get_base1(outcome, i, "outcome", 1), inv_logit(((multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), psi2) + (get_base1(Y, i, "Y", 1) * phi)) + (1 * gamma0))), pstream__)) * stan::math::exp(gd(inv_logit(multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), delta)), pstream__))) * stan::math::exp(h1d(get_base1(Y, i, "Y", 1), J, ((inv_logit(multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), psi0)) * (1 - rho0)) / rho0), (((1 - inv_logit(multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), psi0))) * (1 - rho0)) / rho0), pstream__))) + ((stan::math::exp(fd_l(get_base1(outcome, i, "outcome", 1), inv_logit(((multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), psi2) + (get_base1(Y, i, "Y", 1) * phi)) + (0 * gamma0))), pstream__)) * (1 - stan::math::exp(gd(inv_logit(multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), delta)), pstream__)))) * stan::math::exp(h0d(get_base1(Y, i, "Y", 1), J, ((inv_logit(multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), psi0)) * (1 - rho0)) / rho0), (((1 - inv_logit(multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), psi0))) * (1 - rho0)) / rho0), pstream__))))));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("psi0");
        names__.push_back("psi2");
        names__.push_back("delta00");
        names__.push_back("gamma0");
        names__.push_back("phi");
        names__.push_back("rho0");
        names__.push_back("delta");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_model_predict_cmp_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi0 = in__.vector_constrain(K);
        size_t psi0_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < psi0_j_1_max__; ++j_1__) {
            vars__.push_back(psi0(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi2 = in__.vector_constrain(K);
        size_t psi2_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < psi2_j_1_max__; ++j_1__) {
            vars__.push_back(psi2(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> delta00 = in__.vector_lub_constrain(0, 1, K);
        size_t delta00_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < delta00_j_1_max__; ++j_1__) {
            vars__.push_back(delta00(j_1__));
        }
        double gamma0 = in__.scalar_constrain();
        vars__.push_back(gamma0);
        double phi = in__.scalar_constrain();
        vars__.push_back(phi);
        double rho0 = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(rho0);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 53;
            validate_non_negative_index("delta", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, 1> delta(K);
            stan::math::initialize(delta, DUMMY_VAR__);
            stan::math::fill(delta, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 54;
            for (int i = 1; i <= K; ++i) {
                current_statement_begin__ = 55;
                stan::model::assign(delta, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::log((1 / ((1 / get_base1(delta00, i, "delta00", 1)) - 1))), 
                            "assigning variable delta");
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t delta_j_1_max__ = K;
                for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
                    vars__.push_back(delta(j_1__));
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_model_predict_cmp";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t psi0_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < psi0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi2_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < psi2_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi2" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t delta00_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < delta00_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta00" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "gamma0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho0";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t delta_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "delta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t psi0_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < psi0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi2_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < psi2_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi2" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t delta00_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < delta00_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta00" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "gamma0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho0";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t delta_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "delta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_model_predict_cmp_namespace::model_model_predict_cmp stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
